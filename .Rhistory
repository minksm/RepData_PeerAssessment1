# return if a cached value exists
if(!is.null(inverse)) {
message("cached data exists, getting data")
return(inverse)
}
# if not, get the matrix and store the values in the cache
data <- y$getMatrix()
inverse <- solve(data)
y$cacheInverse(inverse)
# return the newly cached inverse value
inverse
}
library(httr)
require(httpuv)
require(jsonlite)
oauth_endpoints("github")
myapp <- oauth_app("quiz2", "b7e2cd4b9a98e74375fd", secret = "2bf75b3eb06094ec91a17a74d3243db3905bd9f6")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
req <- GET("https://api.github.com/users/jtleek/repos", config(token = github_token))
stop_for_status(req)
remove.packages("Rcpp")
install.packages("Rcpp")
library(httr)
require(httpuv)
require(jsonlite)
library('httpuv')
oauth_endpoints("github")
myapp <- oauth_app("githubAPI", key = "b7e2cd4b9a98e74375fd", secret = "2bf75b3eb06094ec91a17a74d3243db3905bd9f6")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
req <- GET("https://api.github.com/users/jtleek/repos", config(token = github_token))
stop_for_status(req)
output <- content(req)
list(output[[4]]$name, output[[4]]$created_at)
req
output
head(output)
output$url ="https://api.github.com/users/jtleek/repos"
stop_for_status(req)
content(req)
list(output[[4]]$name, output[[4]]$created_at)
list(output[[5]]$name, output[[5]]$created_at)
install.packages("swirl")
library(swirl)
install_from_swirl("Getting and Cleaning Data")
swirl()
mydf <- read.csv(path2csv,stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
cran
?select
select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cran, -time)
-5:20
-(5:20)
select(cran,-(X:size))
filter(cran, package == "swirl")
filter(cran,
| r_version == "3.1.1", country == "US")
filter(cran, r_version == "3.1.1", country == "US")
?Comparsion
??Comparison
?Comparison
filter(cran, user <= "3.0.2", country == "IN")
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, country == "US" | country == "IN")
filter(cran, size > 100500, r_os == "linux-gnu")
is.na(c(3, 5, NA, 10))
!is.na(c(3, 5, NA, 10))
filter(cran,!is.na(r_version))
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2, country,desc(r_version), ip_id)
cran3 <- select(cran,ip_id,package, size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_mb = size / 2^20,size_gb=size_mb / 2^10)
mutate(cran3, correct_size =size+1000)
summarize(cran, avg_bytes = mean(size))
swirl()
read.csv(path2csv,stringsAsFactors = FALSE)
mydf <-read.csv(path2csv,stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr"))
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
cran
?select
select(cran, ip_id,
| package, country)
select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cran, -time)
select(cran -(X:size))
select(cran, -(X:size))
-5:20
-(5:20)
select(cran, -(X:size))
filter(cran, package == "swirl")
(cran, r_version == "3.1.1", country == "US")
filter(cran, r_version == "3.1.1", country == "US")
?Comparison
filter(cran, r_version == "3.0.2", country == "IN")
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, country == "US" | country == "IN")
filter(cran, size > 100500, r_os == "linux-gnu")
is.na(c(3, 5, NA, 10))
!is.na(c(3, 5, NA, 10))
filter(cran,!is.na(r_version))
cran2 <- select (cran,size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version), ip_id)
select (cran, ip_id, package, size)
carn3 <-select (cran, ip_id, package, size)
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_mb = size / 2^20,size_gb=size_mb / 2^10)
mutate(cran3, correct_size = size +1000)
summarize(cran, avg_bytes = mean(size))
swirl()
library(dplyr)
cran <-tbl_df(mydf)
rm("mydf")
cran
?group_by
by_package <- group_by(cran,package)
by_package
summarize(by_package,mean(size))
submit()
pack_sum
quantile(pack_sum$count, probs = 0.99)
top_counts <-filter(pack_sum, count > 679)
top_counts
View(top_counts)
top_counts_sorted<- arrange(top_counts, desc(count))
View(top_counts_sorted)
quantile(pack_sum$unique, probs = 0.99)
top_unique<- filter(pack_sum, unique > 465)
View(top_unique)
top_unique_sorted <-arrange(top_unique, desc(unique))
View(top_unique_sorted)
submit()
submit()
submit()
View(results3)
View(result3)
cran %>%
select(ip_id,country,package,size) %>%
print
submit()
cran %>%
select(ip_id, country, package, size) %>%
mutate(size_mb=size)
print
submit
submit()
submit()
submit
submit()
submit()
cran %>%
select(ip_id, country, package, size) %>%
mutate(size_mb = size / 2^20)
print
submit
submit()
submit()
submit()
library(swirl)
install_from_swirl("Getting and Cleaning Data")
swirl()
library(tidyr)
students
?gather
gather(students,students, sex, count, -grade)
gather(students,students, sex, count(), -grade)
gather(students, sex, count, -grade)
students2
res <- gather(students2, sex_class, count, -grade)
res
?separate
separate (res, sex_class,  = c("sex", "class") )
separate (res, sex_class,  c("sex", "class") )
submit()
students3
submit()
?spread
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
spread(class ,grade ) %>%
print
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
spread(class ,test ) %>%
print
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
spread(grade ,test ) %>%
print
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
spread(name ,test ) %>%
print
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
spread(grade ,test ) %>%
print
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
spread(class ,grade ) %>%
print
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
spread(class ,test ) %>%
print
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
spread(test ,midterm ) %>%
print
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
spread(test ,class ) %>%
print
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
spread(test ,grade ) %>%
print
submit
submit()
extract_numeric("class5")
?mutate
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
spread(test, grade) %>%
### Call to mutate() goes here %>%
mutate(class = extract_numeric(class))
print
submit()
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
spread(test, grade) %>%
### Call to mutate() goes here %>%
mutate(class == extract_numeric(class))
print
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
spread(test, grade) %>%
### Call to mutate() goes here %>%
mutate(class = extract_numeric(class))
print
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
spread(test, grade) %>%
### Call to mutate() goes here %>%
mutate(class = extract_numeric(class))
submit()
students4
submit()
submit()
student_info <- students4 %>%
select(id, name, sex) %>%
### Your code here %>%
unique
print
student_info <- students4 %>%
select(id, name, sex) %>%
### Your code here %>%
unique()
print
student_info <- students4 %>%
select(id, name, sex) %>%
### Your code here %>%
unique()
print
student_info <- students4 %>%
select(id, name, sex) %>%
### Your code here %>%
unique
student_info <- students4 %>%
select(id, name, sex) %>%
### Your code here %>%
unique(student_info)
print
student_info <- students4 %>%
select(id, name, sex) %>%
unique() %>%
print
submit()
submit()
passed
failed
passws
passed
passed <- passed %>% mutate(status = "passed")
failed <- failed %>% mutate(status = "failed")
?bind_rows
bind_rows(passed,failed)
sat
sat %>%
select(-contains(total)
print
sat %>%
select(-contains("total")
print
sat %>%
select(-contains("total")
print
sat %>%
select(-contains(total)
print
select(sat, -contains("total"))
sat %>%
select(-contains("total") %>%
gather(part_sex, count, -score_range) %>%
separate(part_sex,c("part","sex"))> %>%
print
sat %>%
select(-contains("total") %>%
gather(part_sex, count, -score_range) %>%
separate(part_sex,c("part","sex"))> %>%
print()
sat %>%
select(-contains("total") %>%
gather(part_sex, count, -score_range) %>%
print
()
sat %>%
select(-contains("total")) %>%
gather(part_sex, count, -score_range) %>%
separate(part_sex,c("part","sex"))> %>%
print
sat %>%
select(-contains("total")) %>%
gather(part_sex, count, -score_range) %>%
separate(part_sex,c("part","sex"))> %>%
sat %>%
select(-contains("total")) %>%
print
sat %>%
select(-contains("total")) %>%
gather(part_sex, count, -score_range) %>%
print
sat %>%
select(-contains("total")) %>%
gather(part_sex, count, -score_range) %>%
separate(part_sex,c("part","sex"))> %>%
sat %>%
select(-contains("total")) %>%
gather(part_sex, count, -score_range) %>%
separate( part_sex,  c("part", "sex"))> %>%
print
sat %>%
select(-contains("total")) %>%
gather(part_sex, count, -score_range) %>%
separate( part_sex,  c("part", "sex"))> %>%
sat %>%
select(-contains("total")) %>%
gather(part_sex, count, -score_range) %>%
separate( part_sex,  c("part", "sex")) %>%
print
submit()
sat %>%
select(-contains("total")) %>%
gather(part_sex, count, -score_range) %>%
separate(part_sex, c("part", "sex")) %>%
group_by(part,sex) %>%
print
sat %>%
select(-contains("total")) %>%
gather(part_sex, count, -score_range) %>%
separate(part_sex, c("part", "sex")) %>%
group_by(part,sex) %>%
mutate(total = sum(count),
prop = count / total
) %>% print
submit()
library(swirl)
install_from_swirl("Getting and Cleaning Data")
swirl()
Sys.getlocale("LC_TIME")
library(lubridate)
help(package = lubridate)
this_day <- today()
this_day
year(this_day)
wday(this_day)
wday(this_day,label = TRUE)
this_moment <- now()
this_moment
minute(this_moment)
my_date <-ymd("1989-05-17")
my_date
class(my_date)
ymd("1989 May 17")
mdy("March 12, 1975")
dmy(25081985)
ymd("192012")
ymd("1920/1/2")
dt1
ymd_hms(dt1)
hms("03:22:14")
dt2
ymd("2014-05-14" "2014-09-22" "2014-07-11")
ymd("2014-05-14" , "2014-09-22" , "2014-07-11")
ymd(dt2)
update(this_moment, hours = 8, minutes = 34, seconds = 55)
this_moment
update(this_moment<-, hours = 21, minutes = 24, seconds = 55).
update(this_moment<-, hours = 21, minutes = 24, seconds = 55).this_moment <-
this_moment <- update(this_moment<-, hours = 21, minutes = 24, seconds = 55)
this_moment <- update(this_moment, hours = 21, minutes = 24, seconds = 55)
this_moment
?now
now(tzone = "America/New_York")
nyc <- now(tzone = "America/New_York")
nyc
depart <- nyc + days(2)
depar
depart
depart < - update(depart, hours = 17, minutes = 34)
depart <- depart + update(depart, hours = 17, minutes = 34)
depart <- update(depart, hours = 17, minutes = 34)
depart
arrive <- depart +hours(15)+minutes(50
)
?with_tz
with_tz(arrive, tzone = "Asia/Hong_Kong")
arrive <- with_tz(arrive, tzone = "Asia/Hong_Kong")
arrive
last_time <- mdy("June 17, 2008", tz ="Singapore" )
last_time
?new_interval
how_long <- new_interval(last_time, arrive)
as.period(how_long)
stopwatch()
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
library(lattice)
library(datasets)
data(airquality)
p <- xyplot(Ozone ~ Wind | factor(Month), data = airquality)
library(lattice)
library(datasets)
data(airquality)
xyplot(Ozone ~ Wind | factor(Month), data = airquality)
print (p)
print (p)
?splom
?par
?trellis.par.set
?print.trellis
?panel.abline
?axis
?points
?lines
library(datasets)
data(airquality)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
?qplot
library(ggplot)
library(ggplot2)
library(ggplot2)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
qplot(Wind, Ozone, data = airquality)
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
qplot(Wind, Ozone, data = airquality, geom = "smooth")
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
qplot(Wind, Ozone, data = airquality, geom = "smooth")
qplot(Wind, Ozone, data = airquality)
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
qplot(Wind, Ozone, data = airquality)
qplot(Wind, Ozone, data = airquality, geom = "smooth")
?geom
?geom
??geom
library(ggplot2)
g <- ggplot(movies, aes(votes, rating))
print(g)
qplot(votes, rating, data = movies)
qplot(votes, rating, data = movies) + geom_smooth()
qplot(votes, rating, data = movies) + stats_smooth("loess")
qplot(votes, rating, data = movies, smooth = "loess")
qplot(votes, rating, data = movies, panel = panel.loess)
qplot(votes, rating, data = movies) + stats_smooth("loess")
qplot(votes, rating, data = movies) + geom_smooth()
qplot(votes, rating, data = movies) + stats_smooth("loess")
gc()
gc()
setwd("C:/Users/MAH/RepData_PeerAssessment1")
q()
